name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup MUSL
      if: matrix.os == 'ubuntu-latest'
      run: |
        rustup target add x86_64-unknown-linux-musl
        sudo apt-get -qq install musl-tools
    - name: Build for linux
      if: matrix.os == 'ubuntu-latest'
      run: make release_lnx
    - name: Build for macOS
      if: matrix.os == 'macOS-latest'
      run: make release_mac
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: make release_win
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: '*.zip'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-and-push-docker:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Extract tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Build and tag Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/prosafe_exporter
          VERSION_TAG=${{ env.version }}
          
          echo "Building Docker image with tags: ${VERSION_TAG} and latest"
          docker build -t $IMAGE_NAME:$VERSION_TAG -t $IMAGE_NAME:latest .
      - name: Push Docker image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/prosafe_exporter
          VERSION_TAG=${{ env.version }}

          echo "Pushing Docker image tags: ${VERSION_TAG} and latest"
          docker push $IMAGE_NAME:$VERSION_TAG
          docker push $IMAGE_NAME:latest
